# Programmiersprache JULIA

JUlIA ist eine, seit 2009 am Massachusetts Institute of Technology (MIT) entwickelte, dynamische Programmiersprache für technische Berechnungen. Die Veröffentlichung wurde im Februar 2012 bekannt gegeben. Mittlerweile wurde das Open-Source Programm bereits über 45 Millionen mal heruntergeladen und beinhalten über 10000 Packages. Außerdem können Libarys von anderen Programmiersprachen wie beispielsweise Python, C++, R und Fortran genutzt werden. Ziel der Entwickler war es eine Programmiersprache zu schaffen, die sowohl eine benutzerfreundliche Umgebung hat, als auch leistungsfähig wie C und Fortran ist. 

JULIA beschreibt sich selber als (Internetseite)
- Fast - Schnell
- Dynamic - Dynamisch
- Reproducible - Nachvollziehbar
- Composable - Ausbaubar / Erweiterbar (?)
- General - Allgemein
- Open Source 

Um die Programmiersprache etwas detaillierter vorzustellen, wird in den folgenden Abschnitten auf die genannten Punkte näher eingegangen.

## Fast
Julia was designed for high performance. Julia programs automatically compile to efficient native code via LLVM, and support multiple platforms.

## Dynamic
Julia is dynamically typed, feels like a scripting language, and has good support for interactive use, but can also optionally be separately compiled.

## Reproducible
Reproducible environments make it possible to recreate the same Julia environment every time, across platforms, with pre-built binaries.

## Composable
Julia uses multiple dispatch as a paradigm, making it easy to express many object-oriented and functional programming patterns. The talk on the Unreasonable Effectiveness of Multiple Dispatch explains why it works so well.

## General
Julia provides asynchronous I/O, metaprogramming, debugging, logging, profiling, a package manager, and more. One can build entire Applications and Microservices in Julia.

## Open Source
Julia is an open source project with over 1,000 contributors. It is made available under the MIT license. The source code is available on GitHub.


keine Typendeklaration notwendig




---------

1.2 Julia: Eine Einführung
Julia ist eine moderne, hochleistungsfähige Programmiersprache, die speziell für numerische und wissenschaftliche Berechnungen entwickelt wurde. Sie wurde 2012 von Jeff Bezanson, Stefan Karpinski, Viral B. Shah und Alan Edelman ins Leben gerufen und hat sich seither zu einer populären Wahl für die Datenanalyse, maschinelles Lernen, numerische Simulationen und andere rechenintensive Anwendungen entwickelt.

Leistung und Effizienz: Ein herausragendes Merkmal von Julia ist ihre hohe Ausführungsgeschwindigkeit. Sie bietet eine Leistung, die in vielen Fällen mit der von C und Fortran vergleichbar ist, was sie besonders attraktiv für Anwendungen im wissenschaftlichen Bereich macht. Dies wird durch die Just-in-Time (JIT)-Kompilierung erreicht, die auf der LLVM (Low-Level Virtual Machine)-Plattform basiert.

Syntax und Benutzerfreundlichkeit: Die Syntax von Julia ist ähnlich der von MATLAB und Python, was sie für Nutzer aus diesen Umfeldern leicht zugänglich macht. Julia ermöglicht es, mathematische Ausdrücke auf eine sehr intuitive Weise zu formulieren. Dank ihrer dynamischen Typisierung und vielseitigen Metaprogrammierungsfunktionen können Nutzer komplexe Aufgaben mit minimalem Aufwand erledigen. Trotzdem ermöglicht Julia auch die Verwendung von statischen Typen, wenn dies für eine höhere Leistung erforderlich ist.

Parallelität und verteiltes Rechnen: Ein weiterer Vorteil von Julia ist ihre eingebaute Unterstützung für Parallelverarbeitung und verteiltes Rechnen. Mit der Sprache können Berechnungen problemlos über mehrere Prozessoren und Maschinen hinweg verteilt werden, was die Effizienz bei der Verarbeitung großer Datensätze und der Durchführung anspruchsvoller Simulationen erheblich steigert.

Ökosystem und Pakete: Obwohl Julia im Vergleich zu etablierten Programmiersprachen wie Python oder R eine jüngere Sprache ist, hat sie ein wachsendes Ökosystem von Paketen und Bibliotheken, die eine breite Palette von Anwendungsbereichen abdecken. Die Julia-Community ist sehr aktiv, und viele Pakete sind speziell auf wissenschaftliche und technische Berechnungen ausgerichtet. Zu den bekanntesten Paketen gehören Flux.jl für maschinelles Lernen und DifferentialEquations.jl für die Lösung von Differentialgleichungen.

Integration mit anderen Sprachen: Ein weiteres starkes Merkmal von Julia ist ihre Fähigkeit, nahtlos mit anderen Programmiersprachen wie C, Python und R zu interagieren. Dies ermöglicht es, Julia in bestehende Software-Stacks zu integrieren und von den Stärken anderer Sprachen zu profitieren, ohne deren Leistung zu beeinträchtigen.

Zusammenfassung: Julia hat sich als eine vielversprechende Programmiersprache für den Bereich der wissenschaftlichen Berechnungen etabliert. Ihre hohe Performance, benutzerfreundliche Syntax und umfassende Parallelitätsmöglichkeiten machen sie besonders geeignet für große, komplexe Berechnungen in der Wissenschaft, Ingenieurwesen und Finanzindustrie. Durch die stetige Weiterentwicklung und das wachsende Ökosystem hat Julia das Potenzial, eine führende Rolle in der Programmierwelt für numerische und technische Anwendungen zu spielen.
