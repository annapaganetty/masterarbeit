
```{julia}
#| echo: false
#| output: false
include("../../src/setup.jl")
@variables  a,b, h, ν,E ;
```
```{=typst}
= Beispiele
== allseitig gelenkig gelagerte Platte
\
Als erstes Beispiel dient eine quadratische Platte, welche an allen vier Rändern eingespannt ist. 
Belastet wird die Struktur mit einer Flächenlast. Um die Plausibilität der Ergebnisse zu prüfen werden diese mit den Werten der Czerny-Tafeln verglichen.

#table(
    stroke:none,
    columns: (5cm, auto),
    inset: 5pt,
    align: horizon,
    [Plattendicke],[$h = 0,2 "m"$],
    [Elastizitätsmodul],[$E = 31.000 N/(m m^2)$],
    [Flächenlast],[$q = 5 "kN"$],
    [],[$nu = 0,0$],
)
Daten zum Beispiel "allseitig eingespannte Platte"
```

```{julia}
#| echo: false
# Erstellen eines Meshes
m1 = makequadratcicMesh(p1, 3)
f1 = mkfig(a3d=false,w=200, h=200)
mplot!(m1, edgesvisible=true, nodesvisible=true,edgelinewidth = 0.2,featureedgelinewidth=0.5, nodesize=2)
f1
```
```{julia}
#| echo: false
#| output: false
# Erstellen einer Platte
w = plate(m1,p1,"standard",10)
NN = 3 * nnodes(m1)                         #Anzahl Freiheitsgrade ges.
nb = collect(m1.groups[:boundarynodes])     # Randknoten
ni = [i for i in 1:nnodes(m1) if i ∉ nb]    # Innenknoten
adofs = idxDOFs(ni, 3)                      # dofs der Innenknoten 
NNa = length(adofs);                        # Anzahl der adofs

println("NN = ",NN)
println("Randknoten = nb = ", nb)
println("Innenknoten = ni = ", ni)
println("Freiheitsgrade der Innenknoten = adofs = ", adofs)
println("Anzahl von adofs = NNa = ", NNa)
# Basisfunktionen
K3 = [ -1 1 1 -1; -1 -1 1 1]
H4 = hermiteelement(K3,conforming = false); # 12-Element Vektor
```
```{julia}
include("../../src/setup.jl")
#| echo: false
GLMakie.activate!()
ei(n, i) = [j == i ? 1 : 0 for j ∈ 1:n]
plotw(
    m1, 
    ei(NN, adofs[1]), 
    w=250, h=200,
    zs=1.5,
    nodesvisible=true, edgelinewidth=0.5,
    featureedgelinewidth = 0.1,

    limits=(nothing,nothing,(-1,1))
)
```
```{julia}
#| echo: false
plotw(
    m1, 
    ei(NN, adofs[2]), 
    w=250, h=200,
    limits=(nothing,nothing,(-1,1))
)
```
```{julia}
#| echo: false
plotw(
    m1, 
    ei(NN, adofs[3]), 
    w=250, h=200,
    limits=(nothing,nothing,(-1,1))
)
```

Zufällige Kombination von Basisfunktionen
```{julia}
#| echo: false
wrand = zeros(NN)         # Vektor mit 0 gefüllt von der Länge NN
                          # rand(NNa) = Vektor mit random Zahlen zwischen 0-1 
wrand[adofs] = rand(NNa)  # an den Stellen der adofs werden die random Zahlen eingesetzt
plotw(
    m1, 
    wrand, 
    w=275, h=200,
    limits=(nothing,nothing,(-1,1))
)
```