```{julia}
include("../src/setup.jl")
using QuadGK
```

## rechteckiges Element

```{julia}
@variables  h, ν,E ;
D = E*h^3 / 12*(1-ν^2)

m1 = makequadratcicMesh(p1, 2)
e = element(m1,1)
hx = btpHx(e)
hy = btpHy(e)

j11,j12,j21,j22,d = jacobianMatrix(e)

var = Symbolics.variables(:x,1:2)
∂ξ(u) = Symbolics.derivative.(u,x₁)
∂η(u) = Symbolics.derivative.(u,x₂)
B1 =  j11 * ∂ξ(hx) + j12 * ∂η(hx)
B2 =  j21 * ∂ξ(hy) + j22 * ∂η(hy)
B3 =  j11 * ∂ξ(hy) + j12 * ∂η(hy) + j21 * ∂ξ(hx) + j22 * ∂η(hx)
BeNew = [B1 B2 B3]'
BeNew2 = [B1 + ν * B2 ν * B1 + B2 (1- ν)/2 * B3]'
BeNew' * BeNew2
integrate(BeNew' ⋅ BeNew2, (-1 .. 1) , (-1 .. 1))
# quadgk(x -> exp(-x), 0, Inf)
# integrate((BeNew' * BeNew2),[-1,1],[-1,1])
# integrate(BeNew' ⋅ BeNew2, QHat)
# hcat(B1,B2,B3)

```



```{julia}
g = [1,2,3,4,5]
h = [6,7,8,9,10]
i = [11,12,13,14,15]
k = [g h i]'

```














## viereckiges Element
```{julia}
include("../src/setup.jl")
m2 = makequadrilateralMesh(p1, 2, 2)
mplot(m2)
e3 = element(m2,3)    
hxe3 = btpHx(e3)
```

```{julia}
@variables x1, x2;
refJ11 = expand(1/4 * (-8 + 5.6 + 2.4 - 0 + x2 * (8 - 5.6 + 2.4 - 0)))
refJ12 = expand(1/4 * (-8 + 6.4 + 5.6 - 8 + x1 * (8 - 6.4 + 5.6 - 8)))
refJ21 = expand(1/4 * (-8 - 5.6 + 2.4 + 0 + x2 * (8 - 5.6 + 2.4 - 0)))
refJ22 = expand(1/4 * (-8 - 6.4 + 5.6 + 8 + x1 * (8 - 6.4 + 5.6 - 8)))

println(refJ11)
println(refJ12)
println(refJ21)
println(refJ22)
```

```{julia}
V = [ -1 1 1 -1; -1 -1 1 1]
N = serendipityelement(V)

HxE2 = Vector{Any}(undef,12)

HxE2[1] = -0.4326923076923077N[5] - 0.1875N[8]
HxE2[2] = 0.346153846153846N[5]
HxE2[3] = N[1] - 0.019230769230769336N[5] - 0.25N[8]
HxE2[4] = 0.4326923076923077N[5] - 0.44117647058823534N[6]
HxE2[5] = 0.346153846153846N[5] + 0.1764705882352943N[6]
HxE2[6] = N[2] - 0.019230769230769336N[5] - 0.2058823529411764N[6]
HxE2[7] = 0.44117647058823534N[6] - 0.31249999999999994N[7]
HxE2[8] = 0.1764705882352943N[6] - 0.375N[7]
HxE2[9] = N[3] - 0.2058823529411764N[6] + 0.12500000000000008N[7]
HxE2[10] = 0.31249999999999994N[7] + 0.1875N[8]
HxE2[11] = -0.375N[7]
HxE2[12] = N[4] + 0.12500000000000008N[7] - 0.25N[8]
HxE2
```

```{julia}
WGLMakie.activate!()
fig2 = plotH(HxE2)
fig2
```













# Elementsteifigkeitsmatrix

```{julia}
@variables  h, ν,E ;
D = E*h^3 / 12*(1-ν^2)
∂1(u) =  ∂x(u)
∂2(u) =  ∂y(u)
∂3(u) =  ∂x(u) + ∂y(u)
Be(u) = [∂1(u), ∂2(u), ∂3(u)]
        
Be2(u) = [∂1(u) + ν * ∂2(u), ν * ∂1(u) + ∂2(u),(1- ν)/2 * ∂3(u)]
# aestd(u,v) = integrate(Be1std(u) ⋅ Be2std(v), QHat)
# Ke = (simplifyx.([aestd(n1, n2) for n1 ∈ H4, n2 ∈ H4]))
```
