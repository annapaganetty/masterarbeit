---
title: Derivation of plate formulation of Batoz and Tahar
engine: julia
---

```{julia}
using Symbolics
```

geometrische Größen des allgemeines Vierecks nach Batoz und Tahar 

```{julia}
@variables x1, x2, x3, x4, y1, y2, y3, y4;
# x1 = -1
# x2 = 1
# x3 = 1
# x4 = -1
# y1 = -1
# y2 = -1
# y3 = 1
# y4 = 1
```
```{julia}

x = Symbolics.variables(:xnode, 1:4)                # bekannt
y = Symbolics.variables(:ynode, 1:4)                # bekannt

xij = []
push!(xij, x1 - x2)
push!(xij, x2 - x3)
push!(xij, x3 - x4)
push!(xij, x4 - x1)

yij = []
push!(yij, y1 - y2)
push!(yij, y2 - y3)
push!(yij, y3 - y4)
push!(yij, y4 - y1)

lij = []
for i = 1:4
    push!(lij, (xij[i]^2 + yij[i]^2)^(1/2))
end

Ck = []
Sk = []
for i = 1:4
    push!(Ck, -yij[i]/lij[i])
    push!(Sk, xij[i]/lij[i])
end

ak = []
bk = []
ck = []
dk = []
ek = []
for i = 1:4
    push!(ak, -Sk[i]/lij[i])
    push!(bk, -3/4 * Ck[i] * Sk[i])
    push!(ck, -1/2 * Ck[i]^2 - 1/4 * Sk[i]^2)
    push!(dk, -Ck[i]/lij[i])
    push!(ek, -1/2 * Sk[i]^2 + 1/4 * Ck[i]^2)
end
ek
```

Rotations of the normal (16 unknowns)
    1:4 = corner nodes
    5:8 = mid-nodes

```{julia}
βx = Symbolics.variables(:βx, 1:8)
βy = Symbolics.variables(:βy, 1:8)
β = vcat(βx, βy)
```

Partial derivatives of $w$ (16 unknowns)

```{julia}
wx = Symbolics.variables(:wx,1:8)
wy = Symbolics.variables(:wy,1:8)
w = vcat(wx,wy)
```

Element vector (12 knowns)
    Equation (8)
```{julia}
we = Symbolics.variables(:we,1:4)
θex = Symbolics.variables(:θex,1:4)
θey = Symbolics.variables(:θey,1:4)
Ue = vcat([[we[i], θex[i], θey[i]] for i = 1:4]...)
```

Equations

```{julia}
eqns = [];
```

Relate nodal rotations and partial derivatives of $w$ (8 equations)
    Bedingung (a) "the nodal variable must be the displacement w and its derivates θx = w,y and θy = -w,x with respect to x and y at the four corner nodes"
```{julia}
for i = eachindex(θex)
    push!(eqns, θex[i] ~ wy[i])     # θx = w,y      = - βy
    push!(eqns, θey[i] ~ -wx[i])    # θy = - w,x    = βx
end
```

Kirchhoff assumptions in corner nodes (8 equations)
    Equation (4)
```{julia}
for i = 1:4
    push!(eqns, βx[i] + wx[i] ~ 0)
    push!(eqns, βy[i] + wy[i] ~ 0)
end

for i = 5:8
    push!(eqns, βx[i] + wx[i] ~ 0)
    push!(eqns, βy[i] + wy[i] ~ 0)
end
```

Kirchhoff assumptions in mid-nodes (8 equations)

```{julia}
part1 = []
part2 = []

push!(part1, - 1/2 * Ck[1] * (Sk[1] * θex[1] - Ck[1] * θey[1] + Sk[1] * θex[2] - Ck[1] * θey[2]))
push!(part1, - 1/2 * Ck[2] * (Sk[2] * θex[2] - Ck[2] * θey[2] + Sk[2] * θex[3] - Ck[2] * θey[3]))
push!(part1, - 1/2 * Ck[3] * (Sk[3] * θex[3] - Ck[3] * θey[3] + Sk[3] * θex[4] - Ck[3] * θey[4]))
push!(part1, - 1/2 * Ck[4] * (Sk[4] * θex[4] - Ck[4] * θey[4] + Sk[4] * θex[1] - Ck[4] * θey[1]))

push!(part2, - Sk[1] * (3/(2 * lij[1]) * (we[1] - we[2]) + 1/4 * (Ck[1] * θex[1] + Sk[1] * θey[1] + Ck[1] * θex[2] + Sk[1] * θey[2])))
push!(part2, - Sk[2] * (3/(2 * lij[2]) * (we[2] - we[3]) + 1/4 * (Ck[2] * θex[2] + Sk[2] * θey[2] + Ck[2] * θex[3] + Sk[2] * θey[3])))
push!(part2, - Sk[3] * (3/(2 * lij[3]) * (we[3] - we[4]) + 1/4 * (Ck[3] * θex[3] + Sk[3] * θey[3] + Ck[3] * θex[4] + Sk[3] * θey[4])))
push!(part2, - Sk[4] * (3/(2 * lij[4]) * (we[4] - we[1]) + 1/4 * (Ck[4] * θex[4] + Sk[4] * θey[4] + Ck[4] * θex[1] + Sk[4] * θey[1])))

for i = 1:4
    push!(eqns, βx[i+4] ~ (part1[i] + part2[i]))
end
```


```{julia}
part3 = []
part4 = []

push!(part3, - 1/2 * Sk[1] * (Sk[1] * θex[1] - Ck[1] * θey[1] + Sk[1] * θex[2] - Ck[1] * θey[2]))
push!(part3, - 1/2 * Sk[2] * (Sk[2] * θex[2] - Ck[2] * θey[2] + Sk[2] * θex[3] - Ck[2] * θey[3]))
push!(part3, - 1/2 * Sk[3] * (Sk[3] * θex[3] - Ck[3] * θey[3] + Sk[3] * θex[4] - Ck[3] * θey[4]))
push!(part3, - 1/2 * Sk[4] * (Sk[4] * θex[4] - Ck[4] * θey[4] + Sk[4] * θex[1] - Ck[4] * θey[1]))

push!(part4, - Ck[1] * (3/(2 * lij[1]) * (we[1] - we[2]) + 1/4 * (Ck[1] * θex[1] + Sk[1] * θey[1] + Ck[1] * θex[2] + Sk[1] * θey[2])))
push!(part4, - Ck[2] * (3/(2 * lij[2]) * (we[2] - we[3]) + 1/4 * (Ck[2] * θex[2] + Sk[2] * θey[2] + Ck[2] * θex[3] + Sk[2] * θey[3])))
push!(part4, - Ck[3] * (3/(2 * lij[3]) * (we[3] - we[4]) + 1/4 * (Ck[3] * θex[3] + Sk[3] * θey[3] + Ck[3] * θex[4] + Sk[3] * θey[4])))
push!(part4, - Ck[4] * (3/(2 * lij[4]) * (we[4] - we[1]) + 1/4 * (Ck[4] * θex[4] + Sk[4] * θey[4] + Ck[4] * θex[1] + Sk[4] * θey[1])))

for i = 1:4
    push!(eqns, βy[i+4] ~ (part3[i] - part4[i]))
end
```

```{julia}
eqns
```

Solve for unknowns and select only values for beta

```{julia}
vars1 = vcat([[wx[i], wy[i]] for i = 1:8]...)       # 16 unbekannte
vars2 = vcat([[βx[i], βy[i]] for i = 1:8]...)       # 16 unbekannte
vars = vcat(vars1..., vars2...)

Bxi = Symbolics.symbolic_linear_solve(eqns, vars)[length(vars1)+1:end]
```


Serendipity Shape Functions mit parametrischen Koordinaten (-1...1 x -1...1)

```{julia}
include("../src/setup.jl")
N = nodalbasis(makeelement(:serendipity, QHat, k=2))
M = N *0.5
# fplot3d(N)
```

```{julia}
Hx = []
push!(Hx, 3/2 * (N[5] * ak[1] - N[8] * ak[4]))
push!(Hx, N[5] * bk[1] + N[8] * bk[4])
push!(Hx, N[1] - N[5] * ck[1] - N[8] * ck[4])

push!(Hx, 3/2 * (N[6] * ak[2] - N[5] * ak[1]))
push!(Hx, N[6] * bk[2] + N[5] * bk[1])
push!(Hx, N[2] - N[6] * ck[2] - N[5] * ck[1])

push!(Hx, 3/2 * (N[7] * ak[3] - N[6] * ak[2]))
push!(Hx, N[7] * bk[3] + N[6] * bk[2])
push!(Hx, N[3] - N[7] * ck[3] - N[6] * ck[2])

push!(Hx, 3/2 * (N[8] * ak[4] - N[7] * ak[3]))
push!(Hx, N[8] * bk[4] + N[7] * bk[3])
push!(Hx, N[4] - N[8] * ck[4] - N[7] * ck[3])
```

```{julia}
Hy = []
push!(Hy, 3/2 * (N[5] * dk[1] - N[8] * dk[4]))
push!(Hy, - N[1] + N[5] * ek[1] + N[8] * ek[4])
push!(Hy, - N[5] * bk[1] - N[8] * bk[4])

push!(Hy, 3/2 * (N[6] * dk[2] - N[5] * dk[1]))
push!(Hy, - N[2] + N[6] * ek[2] + N[5] * ek[1])
push!(Hy, - N[6] * bk[2] - N[5] * bk[1])

push!(Hy, 3/2 * (N[7] * dk[3] - N[6] * dk[2]))
push!(Hy, - N[3] + N[7] * ek[3] + N[6] * ek[2])
push!(Hy, - N[7] * bk[3] - N[6] * bk[2])

push!(Hy, 3/2 * (N[8] * dk[4] - N[7] * dk[3]))
push!(Hy, - N[4] + N[8] * ek[4] + N[7] * ek[3])
push!(Hy, - N[8] * bk[4] - N[7] * bk[3])
```

