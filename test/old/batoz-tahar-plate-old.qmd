---
title: Derivation of plate formulation of Batoz and Tahar
engine: julia
---

```{julia}
using Symbolics
```

Geometrien des allgemeines Vierecks nach Batoz und Tahar 

```{julia}
# x = Symbolics.variables(:x, 1:4)                # bekannt
# y = Symbolics.variables(:y, 1:4)                # bekannt
# xij = Symbolics.variables(:x, (12,23,34,41))    # bekannt
# yij = Symbolics.variables(:y, (12,23,34,41))    # bekannt
# lij = Symbolics.variables(:l, (12,23,34,41))    # bekannt
# γij = Symbolics.variables(:γ, (12,23,34,41))    # bekannt

# eqnsLength = []
# push!(eqnsLength, xij[1] ~ x[1] - x[2])
# push!(eqnsLength, xij[2] ~ x[2] - x[3])
# push!(eqnsLength, xij[3] ~ x[3] - x[4])
# push!(eqnsLength, xij[4] ~ x[4] - x[1])

# push!(eqnsLength, yij[1] ~ y[1] - y[2])
# push!(eqnsLength, yij[2] ~ y[2] - y[3])
# push!(eqnsLength, yij[3] ~ y[3] - y[4])
# push!(eqnsLength, yij[4] ~ y[4] - y[1])
```

```{julia}
x = Symbolics.variables(:x, 1:4)                # bekannt
y = Symbolics.variables(:y, 1:4)                # bekannt

xij = []
push!(xij, x[1] - x[2])
push!(xij, x[2] - x[3])
push!(xij, x[3] - x[4])
push!(xij, x[4] - x[1])

yij = []
push!(yij, y[1] - y[2])
push!(yij, y[2] - y[3])
push!(yij, y[3] - y[4])
push!(yij, y[4] - y[1])

lij = []
for i = 1:4
    push!(lij, (xij[i]^2 + yij[i]^2)^(1/2))
end

Ck = []
Sk = []
for i = 1:4
    push!(Ck, -yij[i]/lij[i])
    push!(Sk, xij[i]/lij[i])
end

```

Rotations of the normal (16 unknowns)
    1:4 = corner nodes
    5:8 = mid-nodes

```{julia}
βx = Symbolics.variables(:βx, 1:8)
βy = Symbolics.variables(:βy, 1:8)
β = vcat(βx, βy)
```

```{julia}
βs = Symbolics.variables(:βs, 1:8)
βn = Symbolics.variables(:βn, 1:8);
```

Partial derivatives of $w$ (16 unknowns)

```{julia}
wx = Symbolics.variables(:wx,1:8)
wy = Symbolics.variables(:wy,1:8)
w = vcat(wx,wy)
```
```{julia}
ws = Symbolics.variables(:ws,1:8)
wn = Symbolics.variables(:wn,1:8)
```

Element vector (12 knowns)
    Equation (8)
```{julia}
we = Symbolics.variables(:we,1:4)
θex = Symbolics.variables(:θex,1:4)
θey = Symbolics.variables(:θey,1:4)
Ue = vcat([[we[i], θex[i], θey[i]] for i = 1:4]...)

```

Equations

```{julia}
eqns = [];
```

Relate nodal rotations and partial derivatives of $w$ (8 equations)
    Bedingung (a) "the nodal variable must be the displacement w and its derivates θx = w,y and θy = -w,x with respect to x and y at the four corner nodes"
```{julia}
for i = eachindex(θex)
    push!(eqns, θex[i] ~ wy[i])     # θx = w,y      = - βy
    push!(eqns, θey[i] ~ -wx[i])    # θy = - w,x    = βx
end
eqns
```

Kirchhoff assumptions in corner nodes (8 equations)
    Equation (4)
```{julia}
for i = 1:4
    push!(eqns, βx[i] + wx[i] ~ 0)
    push!(eqns, βy[i] + wy[i] ~ 0)
    # push!(eqns, βs[i] ~ ws[i])
    # push!(eqns, βn[i] ~ wn[i])
end

for i = 5:8
    push!(eqns, βx[i] + wx[i] ~ 0)
    push!(eqns, βy[i] + wy[i] ~ 0)
end
eqns
```

Kirchhoff assumptions in mid-nodes (8 equations)

    Equation (5)
```{julia}
# for k = 4:8
#     push!(eqns, βs[k] + ws[k] ~ 0)
#     push!(eqns, βn[k] + wn[k] ~ 0)
# end
```

    Equation (6)
```{julia}
# eqns2 = [];
# push!(eqns, ws[5] ~ (-3/(2*lij[1]) * (we[1] - we[2])- 1/4 * (ws[1] - ws[2])))
# push!(eqns, ws[6] ~ (-3/(2*lij[2]) * (we[2] - we[3])- 1/4 * (ws[2] - ws[3])))
# push!(eqns, ws[7] ~ (-3/(2*lij[3]) * (we[3] - we[4])- 1/4 * (ws[3] - ws[4])))
# push!(eqns, ws[8] ~ (-3/(2*lij[4]) * (we[4] - we[1])- 1/4 * (ws[4] - ws[1])))

# push!(eqns, βn[5] ~ (1/2 * (βn[1] + βn[2])))
# push!(eqns, βn[6] ~ (1/2 * (βn[2] + βn[3])))
# push!(eqns, βn[7] ~ (1/2 * (βn[3] + βn[4])))
# push!(eqns, βn[8] ~ (1/2 * (βn[4] + βn[1])))

# push!(eqns, βn[5] ~ (-1/2 * (wn[1] + wn[2])))
# push!(eqns, βn[6] ~ (-1/2 * (wn[2] + wn[3])))
# push!(eqns, βn[7] ~ (-1/2 * (wn[3] + wn[4])))
# push!(eqns, βn[8] ~ (-1/2 * (wn[4] + wn[1])))


# for k = 1:4
#     push!(eqns, ws[i] ~ (Ck[i] * θex[i] + Sk[i] * θey[i]))
#     push!(eqns, wn[i] ~ (Sk[i] * θex[i] - Ck[i] * θey[i]))
# end
```

```{julia}
eqns3=[]
part1 = []
part2 = []

push!(part1, - 1/2 * Ck[1] * (Sk[1] * θex[1] - Ck[1] * θey[1] + Sk[1] * θex[2] - Ck[1] * θey[2]))
push!(part1, - 1/2 * Ck[2] * (Sk[2] * θex[2] - Ck[2] * θey[2] + Sk[2] * θex[3] - Ck[2] * θey[3]))
push!(part1, - 1/2 * Ck[3] * (Sk[3] * θex[3] - Ck[3] * θey[3] + Sk[3] * θex[4] - Ck[3] * θey[4]))
push!(part1, - 1/2 * Ck[4] * (Sk[4] * θex[4] - Ck[4] * θey[4] + Sk[4] * θex[1] - Ck[4] * θey[1]))

push!(part2, - Sk[1] * (3/(2 * lij[1]) * (we[1] - we[2]) + 1/4 * (Ck[1] * θex[1] + Sk[1] * θey[1] + Ck[1] * θex[2] + Sk[1] * θey[2])))
push!(part2, - Sk[2] * (3/(2 * lij[2]) * (we[2] - we[3]) + 1/4 * (Ck[2] * θex[2] + Sk[2] * θey[2] + Ck[2] * θex[3] + Sk[2] * θey[3])))
push!(part2, - Sk[3] * (3/(2 * lij[3]) * (we[3] - we[4]) + 1/4 * (Ck[3] * θex[3] + Sk[3] * θey[3] + Ck[3] * θex[4] + Sk[3] * θey[4])))
push!(part2, - Sk[4] * (3/(2 * lij[4]) * (we[4] - we[1]) + 1/4 * (Ck[4] * θex[4] + Sk[4] * θey[4] + Ck[4] * θex[1] + Sk[4] * θey[1])))

for i = 1:4
    push!(eqns3, βx[i+4] ~ (part1[i] + part2[i]))
end
eqns3
```
    Equation (7)


TODO: Add remaining equations, number of equations should add up to 32

```{julia}
eqns
```

Solve for unknowns and select only values for beta

TODO: i = 1:8 when all equations are there

```{julia}
vars1 = vcat([[wx[i], wy[i]] for i = 1:4]...)       # 8 unbekannte
vars2 = vcat([[βx[i], βy[i]] for i = 1:8]...)       # 16 unbekannte
vars = vcat(vars1..., vars2...)

Symbolics.solve_for(eqns, vars)[length(vars1)+1:end]        # Lösung der Variablen aus vars für Gleichungen eqns[] von i = 9:16 (2.Hälfte)
```

TODO: Extract matrix