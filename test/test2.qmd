```{julia}
include("../src/setup.jl")
```

```{julia}
# using Symbolics
# @variables x, xe, xe1, ξ;
# l = Symbolics.symbolic_linear_solve(x ~ xe * (1 - ξ)/2 + xe1 * (1 + ξ)/2, ξ)
```

l  = (2x - xe - xe1) / (-xe + xe1)
l1 = (2x - xe - xe1) / (-xe + xe1)

```{julia}
@variables ξ, η, x1, x2, x3, x4, y1, y2, y3, y4, x, y;
n1 = (1/4 * (1 - ξ) * (1 - η))
n2 = (1/4 * (1 + ξ) * (1 - η))
n3 = (1/4 * (1 + ξ) * (1 + η))
n4 = (1/4 * (1 - ξ) * (1 + η))

N = [n1 n2 n3 n4]
xe = [x1; x2; x3; x4]
ye = [y1; y2; y3; y4]

xi = N * xe
yi = N * ye
ξxi = Symbolics.symbolic_linear_solve(x ~ xi[1], ξ)
ξyi = Symbolics.symbolic_linear_solve(x ~ yi[1], ξ)
 
ηyi = Symbolics.symbolic_linear_solve(y ~ xi[1], η)
ηyi = Symbolics.symbolic_linear_solve(y ~ yi[1], η)


```