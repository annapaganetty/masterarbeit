```{julia}
include("../src/setup.jl")
```

# Beispiel quadratische Platte

## Plot der Plattenelemente
```{julia}
WGLMakie.activate!()
xElem = 20
m1 = makequadratcicMesh(p1, xElem)
plotmesh(m1;title="quadratische Platte")
```

## Verformung 

Berechnung der Elementsteifigkeitsmatrizen und Lastvektoren, sowie Festlegung der Randbedingungen. Anschließend Berechnung der Verformung
```{julia}
nf = 3
bcs = [true, true, true]
m1.data[:kefunc] = plateKe(p1)
m1.data[:refunc] = plateRe(p1.q)
K,r = assembleKrBTP(m1,nf)
applyDirichletBCs!(m1.groups[:boundarynodes], K, r, bcs)
w = K \ r
```

Ausgabe maximale Verformung und prozentuale Abweichung von der Berechnung nach den Czerny-Tafeln
```{julia}
w_fe = maximum(w[1:3:end])
w_czerny = 5e3 * 8^4 / (31000e6 * 0.2^3) * 0.0152
w_abw = 100 * abs(w_fe - w_czerny) / w_czerny
```

```{julia}
plotwBTP(m1, w; title="Verformung")
```

## Verdrehung ThetaX
```{julia}
plotThetaxBTP(m1, w; title="Verdrehung θx")
```

## Verdrehung ThetaY
```{julia}
plotThetayBTP(m1, w; title="Verdrehung θy")
```

## Schnittgrößen Plotten 

```{julia}
m1.data[:post] = postprocessor(p1, w)
```

```{julia}
post = m1.data[:post]
for i = 1 : nelements(m1)
    ff = face(m1, i)
    we = post(ff, :mx)
    println("mx[",i,"] = ",we)
end
```

### Mx
```{julia}
plotrBTP(m1, :mx, "Biegemoment mx", (-17, 17),nodal = true, a3d=true)
```

### My
```{julia}
plotrBTP(m1, :my, "Biegemoment my", (-17, 17),nodal = true, a3d=true)
```

### Mxy
```{julia}
plotrBTP(m1, :mxy, "Biegemoment mxy", (-17, 17),nodal = true, a3d=true)
```

