```{julia}
include("../src/setup.jl")
```

# Patch Test

```{julia}
a = 20 
b = 10 
```

Parameter Platte 
```{julia}
p3 = @var Params()
p3.lx = 2*a
p3.ly = 2*b
p3.q = 5e3
p3.ν = 0
p3.h = 1
p3.E = 1000;
```

## Plot der Plattenelemente
```{julia}
WGLMakie.activate!()
mPatch = makequadrilateralMesh(p3)
plotmesh(mPatch;title="Patch Test")
```

## Verformung 

Berechnung der Elementsteifigkeitsmatrizen und Lastvektoren, sowie Festlegung der Randbedingungen. Anschließend Berechnung der Verformung
```{julia}
nf = 3
bcs = [true, true, true]
mPatch.data[:kefunc] = plateKe(p3)
mPatch.data[:refunc] = plateRe(p3.q)
K,r = assembleKrBTP(mPatch,nf)
# applyDirichletBCs!(m1.groups[:boundarynodes], K, r, bcs)
# w = K \ r
```

Ausgabe maximale Verformung und prozentuale Abweichung von der Berechnung nach den Czerny-Tafeln
```{julia}
w_fe = maximum(w[1:3:end])
w_czerny = 5e3 * 8^4 / (31000e6 * 0.2^3) * 0.0152
w_abw = 100 * abs(w_fe - w_czerny) / w_czerny
```

```{julia}
plotwBTP(m1, w; title="Verformung")
```

## Verdrehung ThetaX
```{julia}
plotThetaxBTP(m1, w; title="Verdrehung θx")
```

## Verdrehung ThetaY
```{julia}
plotThetayBTP(m1, w; title="Verdrehung θy")
```

## Schnittgrößen Plotten 

```{julia}
m1.data[:post] = postprocessor(p1, w)
```

```{julia}
post = m1.data[:post]
for i = 1 : nelements(m1)
    ff = face(m1, i)
    we = post(ff, :mx)
    println("mx[",i,"] = ",we)
end
```

### Mx
```{julia}
plotrBTP(m1, :mx, "Biegemoment mx", (-17, 17),nodal = true, a3d=true)
```

### My
```{julia}
plotrBTP(m1, :my, "Biegemoment my", (-17, 17),nodal = true, a3d=true)
```

### Mxy
```{julia}
plotrBTP(m1, :mxy, "Biegemoment mxy", (-17, 17),nodal = true, a3d=true)
```

