```{julia}
include("../src/setup.jl")
```

# bilineare Platte mit 9 Elementen

## Plot der Plattenelemente

```{julia}
WGLMakie.activate!()
xElem = 3
m1 = makequadratcicMesh(p1, xElem)
plotmesh(m1;title="quadratische Platte")
```

## Verformung 

Berechnung der Elementsteifigkeitsmatrizen und Lastvektoren, sowie Festlegung der Randbedingungen. Anschließend Berechnung der Verformung

```{julia}
w = plate(m1, p1, "BTP")
```

```{julia}
NN = 3 * nnodes(m1)
nb = collect(m1.groups[:boundarynodes])
ni = [i for i in 1:nnodes(m1) if i ∉ nb]
adofs = idxDOFs(ni, 3)
NNa = length(adofs)
```

```{julia}
ei(n, i) = [j == i ? 1 : 0 for j ∈ 1:n]
```

## Plot Verformung

```{julia}
plotwBTP(m1, w; title="Verformung")
```

## Basisfunktionen bilinear 

```{julia}
plotBasisfunc(m1, makeweBTP(ei(NN, adofs[1])); title="Verformung")
```

```{julia}
plotBasisfunc(m1, makeweBTP(ei(NN, adofs[4])); title="Verformung")
```

```{julia}
plotBasisfunc(m1, makeweBTP(ei(NN, adofs[7])); title="Verformung")
```

```{julia}
plotBasisfunc(m1, makeweBTP(ei(NN, adofs[10])); title="Verformung")
```

```{julia}
fig2 = Figure(;size = (1600,325),linewidth = 0.5,fontsize = 12,font="calibri")
n1 = [1,4,7,10]
for i = 1:4
        ax = Axis3(fig2[1,i], aspect=:data, title = "", viewmode=:stretch, perspectiveness=0.5, limits=(nothing, nothing, nothing), protrusions=0)
        hidedecorations!(ax)
        hidespines!(ax)
        mplot!(m1, makeweBTP(ei(NN, adofs[n1[i]])),
            faceplotzscale = 2,
            faceplotmesh = 5,
            edgesvisible = false, 
            edgelinewidth = 0.2,
            nodesvisible = false,
            featureedgelinewidth = 0.5,
            color = 5,
            colorrange = Makie.automatic,
            colormap= Makie.theme(:colormap),
            limits = (nothing, nothing, nothing))
end
fig2
# save("Basisfunktionen_Bilinear.png",fig2)
```


# hermite Platte mit 9 Elementen

```{julia}
WGLMakie.activate!()
xElem2 = 3
m2 = makequadratcicMesh(p1, xElem)
plotmesh(m2;title="quadratische Platte")
```


## Verformung 

Berechnung der Elementsteifigkeitsmatrizen und Lastvektoren, sowie Festlegung der Randbedingungen. Anschließend Berechnung der Verformung

```{julia}
w2 = plate(m2, p1, "kirchhoff_conforming")
```

```{julia}
NN2 = 4 * nnodes(m2)
nb2 = collect(m2.groups[:boundarynodes])
ni2 = [i for i in 1:nnodes(m2) if i ∉ nb]
adofs2 = idxDOFs(ni2, 4)
NNa2 = length(adofs2)
```

## Plot Basisfunktionen hermite

```{julia}
fig = Figure(;size = (1600,1300),linewidth = 0.5,fontsize = 12,font="calibri")
for i = 1:4
    for j = 1:4
        if i == 1
            n = j
        elseif i == 2
            n = j + 4
        elseif i == 3
            n = j + 8
        elseif i == 4
            n = j + 12
        end
        ax = Axis3(fig[i,j], aspect=:data, title = "", viewmode=:stretch, perspectiveness=0.5, limits=(nothing, nothing, nothing), protrusions=0)
        hidedecorations!(ax)
        hidespines!(ax)
        mplot!(m2, makeweBFS(ei(NN2, adofs2[n])),
            faceplotzscale = 2,
            faceplotmesh = 5,
            edgesvisible = false, 
            edgelinewidth = 0.2,
            nodesvisible = false,
            featureedgelinewidth = 0.5,
            color = 5,
            colorrange = Makie.automatic,
            colormap= Makie.theme(:colormap),
            limits = (nothing, nothing, nothing))
    end
end
fig
# save("Basisfunktionen_Hermite.png",fig)
```


