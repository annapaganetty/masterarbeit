---
title: Derivation of plate formulation of Batoz and Tahar
engine: julia
---

```{julia}
using Symbolics
```

geometrische Größen des allgemeines Vierecks nach Batoz und Tahar 

```{julia}
Ck = Symbolics.variables(:C,5:8)
Sk = Symbolics.variables(:S,5:8)
lij = Symbolics.variables(:l,(12,23,34,41))
```

Element vector (12 knowns)
    Equation (8)
```{julia}
we = Symbolics.variables(:we,1:4)
θex = Symbolics.variables(:θex,1:4)
θey = Symbolics.variables(:θey,1:4)
Ue = vcat([[we[i], θex[i], θey[i]] for i = 1:4]...)
```


```{julia}
βn = []
push!(βn, expand(-1/2 * (Sk[1] * (θex[1] + θex[2]) + Ck[1] * (-θey[1] - θey[2]))))      # βn5
push!(βn, expand(-1/2 * (Sk[2] * (θex[2] + θex[3]) + Ck[2] * (-θey[2] - θey[3]))))      # βn6
push!(βn, expand(-1/2 * (Sk[3] * (θex[3] + θex[4]) + Ck[3] * (-θey[3] - θey[4]))))      # βn7
push!(βn, expand(-1/2 * (Sk[4] * (θex[4] + θex[1]) + Ck[4] * (-θey[4] - θey[1]))))      # βn8

ws = []
push!(ws, expand((-3/(2*lij[1])) * (we[1] - we[2]) - 1/4 * (Ck[1] * (θex[1] + θex[2]) + Sk[1] * (θey[1] + θey[2]))))
push!(ws, expand((-3/(2*lij[2])) * (we[2] - we[3]) - 1/4 * (Ck[2] * (θex[2] + θex[3]) + Sk[2] * (θey[2] + θey[3]))))
push!(ws, expand((-3/(2*lij[3])) * (we[3] - we[4]) - 1/4 * (Ck[3] * (θex[3] + θex[4]) + Sk[3] * (θey[3] + θey[4]))))
push!(ws, expand((-3/(2*lij[4])) * (we[4] - we[1]) - 1/4 * (Ck[4] * (θex[4] + θex[1]) + Sk[4] * (θey[4] + θey[1]))))

βs = []
for i = 1:4
    push!(βs, -ws[i])
end
βs
```

βxi & βyi
```{julia}
βxi = []
βyi = []
for i = 1:4
    push!(βxi, θey[i])
    push!(βyi, -θex[i])
end
for i = 1:4
    push!(βxi, expand(Ck[i] * βn[i] - Sk[i] * βs[i]))
    push!(βyi, expand(Sk[i] * βn[i] + Ck[i] * βs[i]))
end
βyi
```

Variablen, stellvertreten für die Basisfunktioen 
```{julia}
N = Symbolics.variables(:N,1:8)
```

Berechnung von βx und βy
```{julia}
betaX = []
betaY = []
for i = 1:8 
    push!(betaX, expand(N[i] * βxi[i]))
    push!(betaY, expand(N[i] * βyi[i]))
end
βx = simplify((sum(betaX)))
βy = simplify((sum(betaX)))
```

```{julia}
Hx = simplify.([Symbolics.coeff(βx, y) for y = Ue])
Hy = simplify.([Symbolics.coeff(βy, y) for y = Ue])
```

```{julia}
include("../../src/setup.jl")
generateH(Hx,Hy)
```

```{julia}
@variables x1,x2,x3,x4,y1,y2,y3,y4;
    # x1 = 0
    # x2 = 2
    # x3 = 2.2
    # x4 = 0.1
    # y1 = 0
    # y2 = 0.3
    # y3 = 2
    # y4 = 0.1

    xij = []
    push!(xij, x1 - x2)
    push!(xij, x2 - x3)
    push!(xij, x3 - x4)
    push!(xij, x4 - x1)

    yij = []
    push!(yij, y1 - y2)
    push!(yij, y2 - y3)
    push!(yij, y3 - y4)
    push!(yij, y4 - y1)

    Ck = Symbolics.variables(:C,5:8)
    Sk = Symbolics.variables(:S,5:8)
    lij = Symbolics.variables(:l,(12,23,34,41))

    eqns = []
    for i = 1:4
        push!(eqns, lij[i] ~ (xij[i]^2 + yij[i]^2)^(1/2))
        # Ck[i] =  -yij[i]/lij[i]
        # Sk[i] = xij[i]/lij[i]
    end

Symbolics.symbolic_linear_solve(eqns, lij)[1:end]
l₁₂
```

