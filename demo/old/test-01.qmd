```{julia}
include("../src/setup.jl")
using QuadGK
```

```{julia}
include("../src/setup.jl")
# generateKeBTP()
Hx = btpHx()
Hy = btpHy()

∂ξ(u) = ∂x(u)
∂η(u) = ∂y(u)

@variables j11,j12,j21,j22,d, h, ν,E;
# D = E*h^3 / 12*(1-ν^2)
# Be1(u) =  j11 * ∂ξ(u) + j12 * ∂η(u)
# Be2(v) =  j21 * ∂ξ(v) + j22 * ∂η(v)
# Be3(u,v) =  j11 * ∂ξ(v) + j12 * ∂η(v) + j21 * ∂ξ(u) + j22 * ∂η(u)
# BeN(u,v) = [Be1(u) Be2(v) Be3(u,v)]
# BeN2(u,v) = [Be1(u) + ν * Be2(v); ν * Be1(u) + Be2(v); (1- ν)/2 * Be3(u,v)]

# ae(u,v) = integrate(BeN(u,v) ⋅ BeN2(u,v), (-1 .. 1) , (-1 .. 1))
# Ke = (simplifyx.([ae(n1, n2) for n1 ∈ Hx, n2 ∈ Hy]))

# XiHx = ([∂ξ(n1) for n1 ∈ Hx])
XiHx = [∂ξ(Hx[1]) ∂ξ(Hx[2]) ∂ξ(Hx[3]) ∂ξ(Hx[4]) ∂ξ(Hx[5]) ∂ξ(Hx[6]) ∂ξ(Hx[7]) ∂ξ(Hx[8]) ∂ξ(Hx[9]) ∂ξ(Hx[10]) ∂ξ(Hx[11]) ∂ξ(Hx[12])]
XiHy = [∂ξ(Hy[1]) ∂ξ(Hy[2]) ∂ξ(Hy[3]) ∂ξ(Hy[4]) ∂ξ(Hy[5]) ∂ξ(Hy[6]) ∂ξ(Hy[7]) ∂ξ(Hy[8]) ∂ξ(Hy[9]) ∂ξ(Hy[10]) ∂ξ(Hy[11]) ∂ξ(Hy[12])]
EtaHx = [∂η(Hx[1]) ∂η(Hx[2]) ∂η(Hx[3]) ∂η(Hx[4]) ∂η(Hx[5]) ∂η(Hx[6]) ∂η(Hx[7]) ∂η(Hx[8]) ∂η(Hx[9]) ∂η(Hx[10]) ∂η(Hx[11]) ∂η(Hx[12])]
EtaHy = [∂η(Hy[1]) ∂η(Hy[2]) ∂η(Hy[3]) ∂η(Hy[4]) ∂η(Hy[5]) ∂η(Hy[6]) ∂η(Hy[7]) ∂η(Hy[8]) ∂η(Hy[9]) ∂η(Hy[10]) ∂η(Hy[11]) ∂η(Hy[12])]

B1 = j11 .* XiHx + j12 .* EtaHx
B2 = j21 .* XiHy + j22 .* EtaHy
B3 =  j11 .* XiHy + j12 .* EtaHy + j21 .* XiHx + j22 .* EtaHx

Be =    [B1[1] B1[2] B1[3] B1[4] B1[5] B1[6] B1[7] B1[8] B1[9] B1[10] B1[11] B1[12]; 
         B2[1] B2[2] B2[3] B2[4] B2[5] B2[6] B2[7] B2[8] B2[9] B2[10] B2[11] B2[12]; 
         B3[1] B3[2] B3[3] B3[4] B3[5] B3[6] B3[7] B3[8] B3[9] B3[10] B3[11] B3[12]]

BeT =   [B1[1]  B2[1]  B3[1];
         B1[2]  B2[2]  B3[2];
         B1[3]  B2[3]  B3[3];
         B1[4]  B2[4]  B3[4];
         B1[5]  B2[5]  B3[5];
         B1[6]  B2[6]  B3[6];
         B1[7]  B2[7]  B3[7];
         B1[8]  B2[8]  B3[8];
         B1[9]  B2[9]  B3[9];
         B1[10] B2[10] B3[10];
         B1[11] B2[11] B3[11];
         B1[12] B2[12] B3[12]]
# BeTrans = [B1 + ν*B2, ν*B1 + B2, (1-ν)/2 * B3]'

# ae = integrate(Be ⋅ BeTrans, (-1 .. 1) , (-1 .. 1))
integrate(BeT ⋅ Be, QHat)
```

```{julia}
include("../src/setup.jl")
# generateKeBTP()
Hx = btpHx()
Hy = btpHy()

∂ξ(u) = ∂x(u)
∂η(u) = ∂y(u)

@variables j11,j12,j21,j22,d, h, ν,E;
Be1(u) =  j11 * ∂ξ(u) + j12 * ∂η(u)
Be2(v) =  j21 * ∂ξ(v) + j22 * ∂η(v)
Be3(u,v) =  j11 * ∂ξ(v) + j12 * ∂η(v) + j21 * ∂ξ(u) + j22 * ∂η(u)
BeN(u,v) = [Be1(u) Be2(v) Be3(u,v)]
BeN2(u,v) = [Be1(u) + ν * Be2(v), ν * Be1(u) + Be2(v), (1- ν)/2 * Be3(u,v)]

# D = E*h^3 / 12*(1-ν^2)
ae(u,v) = integrate(BeN(u,v)⋅BeN(u,v), (-1 .. 1) , (-1 .. 1))
# Ke = ([ae(n1, n2) for n1 ∈ Hx, n2 ∈ Hy])
# ae(Hx[1],Hy[1])
```

```{julia}
include("../src/setup.jl")
m1 = makequadratcicMesh(p1, 3)
e1 = element(m1,1)
m1.data[:kefunc] = btpKe(p1)
m1.data[:refunc] = btpRe(p1.q)
ke1 = e1.data[:kefunc]
re1 = e1.data[:refunc]
Ke = ke1(e1)
r1 = re1(e1)
K,r = assembleKrBTP(m1,3)
w = K \ r
w[1]
```

TODO: re erstellen

```{julia}
@variables E, H, ν;
D = E*h^3 / 12*(1-ν^2)
Db = [1 ν 0; ν 1 0;0 0 (1-ν)/2]
HxXi = Symbolics.variables(:Hxξ,1:12)
HxEta = Symbolics.variables(:Hxη,1:12)
HyXi = Symbolics.variables(:Hyξ,1:12)
HyEta = Symbolics.variables(:Hyη,1:12)

J = Symbolics.variables(:j,[11,12,21,22])

Be1New =  J[1] * HxXi' + J[2] * HxEta'
Be2New =  J[3] * HyXi' + J[4] * HyEta'
Be3New =  J[1] * HyXi' + J[2] * HyEta' + J[3] * HxXi' + J[4] * HxEta'

BNew = Array{Any}(undef,3,12)
for i = 1:12
    BNew[1,i] = Be1New[i]
    BNew[2,i] = Be2New[i]
    BNew[3,i] = Be3New[i]
end 

K = simplifyx.(BNew' * Db * BNew)
pKe(K)



```

------------------------------------------------------------
XiHx = ([∂ξ(n1) for n1 ∈ Hx])
XiHy = ([∂ξ(n1) for n1 ∈ Hy])
EtaHx = ([∂η(n1) for n1 ∈ Hx])
EtaHy = ([∂η(n1) for n1 ∈ Hy])

B1 = j11 .* XiHx + j12 .* EtaHx
B2 = j21 .* XiHy + j22 .* EtaHy
B3 =  j11 .* XiHy + j12 .* EtaHy + j21 .* XiHx + j22 .* EtaHx

Be = Array{Any}(undef,3,12)
for i = 1:12
    Be[1,i] = B1[i]
    Be[2,i] = B2[i]
    Be[3,i] = B3[i]
end 

BeT = Array{Any}(undef,3,12)
for i = 1:12
    Be[1,i] = B1[i]
    Be[2,i] = B2[i]
    Be[3,i] = B3[i]
end 
------------------------------------------------------------


Aufschreiben wie viele Funktionen in den Vektoren sind etc.

## rechteckiges Element

```{julia}
V = [ -1 1 1 -1; -1 -1 1 1]
N = serendipityelement(V)
```


```{julia}
WGLMakie.activate!()
fig1 = plotH(hx)
fig1
```


## viereckiges Element
```{julia}
include("../src/setup.jl")
m2 = makequadrilateralMesh(p1, 2, 2)
mplot(m2)
# e3 = element(m2,3)    
# hxe3 = btpHx(e3)
```

```{julia}
@variables x1, x2;
refJ11 = expand(1/4 * (-8 + 5.6 + 2.4 - 0 + x2 * (8 - 5.6 + 2.4 - 0)))
refJ12 = expand(1/4 * (-8 + 6.4 + 5.6 - 8 + x1 * (8 - 6.4 + 5.6 - 8)))
refJ21 = expand(1/4 * (-8 - 5.6 + 2.4 + 0 + x2 * (8 - 5.6 + 2.4 - 0)))
refJ22 = expand(1/4 * (-8 - 6.4 + 5.6 + 8 + x1 * (8 - 6.4 + 5.6 - 8)))

println(refJ11)
println(refJ12)
println(refJ21)
println(refJ22)
```

```{julia}
V = [ -1 1 1 -1; -1 -1 1 1]
N = serendipityelement(V)

HxE2 = Vector{Any}(undef,12)

HxE2[1] = -0.4326923076923077N[5] - 0.1875N[8]
HxE2[2] = 0.346153846153846N[5]
HxE2[3] = N[1] - 0.019230769230769336N[5] - 0.25N[8]
HxE2[4] = 0.4326923076923077N[5] - 0.44117647058823534N[6]
HxE2[5] = 0.346153846153846N[5] + 0.1764705882352943N[6]
HxE2[6] = N[2] - 0.019230769230769336N[5] - 0.2058823529411764N[6]
HxE2[7] = 0.44117647058823534N[6] - 0.31249999999999994N[7]
HxE2[8] = 0.1764705882352943N[6] - 0.375N[7]
HxE2[9] = N[3] - 0.2058823529411764N[6] + 0.12500000000000008N[7]
HxE2[10] = 0.31249999999999994N[7] + 0.1875N[8]
HxE2[11] = -0.375N[7]
HxE2[12] = N[4] + 0.12500000000000008N[7] - 0.25N[8]
HxE2
```

```{julia}
WGLMakie.activate!()
fig2 = plotH(HxE2)
fig2
```

```{julia}
include("../src/setup.jl")
V = [ -1 1 1 -1; -1 -1 1 1]
Hermine = hermiteelement(V;conforming=true)

figHermine = plotH(Hermine)
save("first_figure.png", figHermine)
```














# Elementsteifigkeitsmatrix

```{julia}
@variables  h, ν,E ;
D = E*h^3 / 12*(1-ν^2)
∂1(u) =  ∂x(u)
∂2(u) =  ∂y(u)
∂3(u) =  ∂x(u) + ∂y(u)
Be(u) = [∂1(u), ∂2(u), ∂3(u)]
        
Be2(u) = [∂1(u) + ν * ∂2(u), ν * ∂1(u) + ∂2(u),(1- ν)/2 * ∂3(u)]
# aestd(u,v) = integrate(Be1std(u) ⋅ Be2std(v), QHat)
# Ke = (simplifyx.([aestd(n1, n2) for n1 ∈ H4, n2 ∈ H4]))
```
