```{julia}
include("../../src/setup.jl")
```

# Patch Test - einseitig

## Plot der Plattenelemente
```{julia}
WGLMakie.activate!()
mPatchY = makePTMesh01(p3)
plotmesh(mPatchY;title="Patch Test")
```

## Verformung 

```{julia}
nf = 3
bcs = [true, false, true]
bcs1 = [false, false, false]

mPatchY.data[:kefunc] = plateKe(p3)
mPatchY.data[:refunc] = plateRe(p3.q)
K,r = assembleKr(mPatchY,nf)
display(p3.q)
# Randmomente um die x-Achse
dofs2 = idxDOFs(mPatchY.groups[:boundarynodes],3)
r[dofs2[2]]  = 1 * a/2 
r[dofs2[5]]  = 1 * a  
r[dofs2[8]]  = 1 * a/2 
r[dofs2[11]] = 1 * 0   
r[dofs2[14]] = 1 * 0
r[dofs2[17]] = 1 * -a/2
r[dofs2[20]] = 1 * -a
r[dofs2[23]] = 1 * -a/2 

applyDirichletBCs!(mPatchY.groups[:boundarynodes][1:3], K, r, bcs)
applyDirichletBCs!(mPatchY.groups[:boundarynodes][6:8], K, r, bcs)
applyDirichletBCs!(mPatchY.groups[:boundarynodes][4:5], K, r, bcs1)

w = K \ r
thetaX = w[2:3:end]
thetaY = w[3:3:end] # an jeder stelle ungefähr 0

```

6   7   8
4       5   
1   2   3

```{julia}
plotwBTP(mPatchY, w; title="Verformung")
```

## Verdrehung ThetaX
```{julia}
plotThetaxBTP(mPatchY, w; title="Verdrehung θx")
```

## Verdrehung ThetaY
```{julia}
plotThetayBTP(mPatchY, w; title="Verdrehung θy")
```

## Schnittgrößen Plotten 

```{julia}
mPatchY.data[:post] = postprocessorBTP(p3, w)
set_theme!(theme_minimal())
update_theme!(
    colormap=:redblue,
    color=3,
    faceplotzscale=1,
    faceplotnpoints=15,
    edgesvisible=true,
    featureedgelinewidth=2.5
)
```

### Mx
```{julia}
plotrBTP(mPatchY, :mx, "Biegemoment mx", (-5, 5),nodal = false, a3d=true)
```

### My
```{julia}
plotrBTP(mPatchY, :my, "Biegemoment my", (-1, 1),nodal = false, a3d=true)
```

### Mxy
```{julia}
plotrBTP(mPatchY, :mxy, "Biegemoment mxy", (-1,1),nodal = false, a3d=true)
```

```{julia}
plotrBTP(mPatchY, :qx, "Querkraft qx", (-1,1),nodal = false, a3d=true)
```

```{julia}
plotrBTP(mPatchY, :qy, "Querkraft qy", (-1,1),nodal = true, a3d=true)
```


