```{julia}
include("../../src/setup.jl")
```

# Patch Test

## Plot der Plattenelemente
```{julia}
WGLMakie.activate!()
mPatchOGY = makequadrilateralMesh(p3)
plotmesh(mPatchOGY;title="Patch Test")
```

## Verformung 

Berechnung der Elementsteifigkeitsmatrizen und Lastvektoren, sowie Festlegung der Randbedingungen. Anschließend Berechnung der Verformung

```{julia}
nf = 3
bcs1 = [true, false, false]
bcs2 = [false, false, false]
mPatchOGY.data[:kefunc] = plateKe(p3)
mPatchOGY.data[:refunc] = plateRe(p3.q)
K,r = assembleKr(mPatchOGY,nf)

applyDirichletBCs!(mPatchOGY.groups[:boundarynodes], K, r, bcs1)

dofs2 = idxDOFs(mPatchOGY.groups[:boundarynodes],3)

# Verschiebungen an Eckknoten = 0
# for i = [1,4,7]
#     r[dofs2[i]] = 0
# end
# r[dofs2[10]] = 2

# Randmomente um die y-Achse
r[dofs2[2]]  = a 
r[dofs2[5]]  = a
r[dofs2[8]]  = -a
r[dofs2[11]] = -a
# Randmomente um die x-Achse 
r[dofs2[3]]  = 0
r[dofs2[6]]  = 0
r[dofs2[9]]  = 0
r[dofs2[12]] = 0

w = K \ r

thetaX = w[2:3:end]
# thetaY = w[3:3:end]
w[1:3:end]
```

```{julia}
plotwBTP(mPatchOGY, w; title="Verformung")
```

## Verdrehung ThetaX
```{julia}
plotThetaxBTP(mPatchOGY, w; title="Verdrehung θx")
```

## Verdrehung ThetaY
```{julia}
plotThetayBTP(mPatchOGY, w; title="Verdrehung θy")
```

## Schnittgrößen Plotten 

```{julia}
mPatchOGY.data[:post] = postprocessorBTP(p3, w)
set_theme!(theme_minimal())
update_theme!(
    colormap=:redblue,
    color=3,
    faceplotzscale=1,
    faceplotnpoints=15,
    edgesvisible=true,
    featureedgelinewidth=2.5
)
```

### Mx
```{julia}
plotrBTP(mPatchOGY, :mx, "Biegemoment mx", (-1, 1),nodal = false, a3d=true)
```

### My
```{julia}
plotrBTP(mPatchOGY, :my, "Biegemoment my", (-0.03, 0.02),nodal = false, a3d=true)
```

### Mxy
```{julia}
plotrBTP(mPatchOGY, :mxy, "Biegemoment mxy", (-14 , 9),nodal = false, a3d=true)
```
