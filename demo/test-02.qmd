```{julia}
include("../src/setup.jl")
using QuadGK
coeffbtpHx()
```

```{julia}
include("../src/setup.jl")
WGLMakie.activate!()
nf = 3                      # Freiheitsgrade pro Knoten
bcs = [true, true, true]

xElem = 10
m1 = makequadratcicMesh(p1, xElem)
e1 = element(m1,1)
m1.data[:kefunc] = btpKe(p1)
m1.data[:refunc] = btpRe(p1.q)
# ke1 = e1.data[:kefunc]
# re1 = e1.data[:refunc]
# Ke = ke1(e1)
# r1 = re1(e1)
K,r = assembleKrBTP(m1,nf)

applyDirichletBCs!(m1.groups[:boundarynodes], K, r, bcs)
w = K \ r
wFloat = Symbolics.symbolic_to_float.(w)
wNew = wFloat[1:3:end]

# w_fe = maximum(wNew)
plotw(m1, wFloat,conforming=false)

```

Bei 10x10 Elementen Abweichung:         2.5429060474381826 %
Bei 20x20 Elementen Abweichung:         0.5655723474065587 %

## rechteckiges Element

```{julia}
V = [ -1 1 1 -1; -1 -1 1 1]
H4 = hermiteelement(V;conforming=false)
# N = serendipityelement(V)
```


```{julia}
WGLMakie.activate!()
fig1 = plotH(hx)
fig1
```


## viereckiges Element
```{julia}
include("../src/setup.jl")
m2 = makequadrilateralMesh(p1, 2, 2)
mplot(m2)
# e3 = element(m2,3)    
# hxe3 = btpHx(e3)
```


```{julia}
WGLMakie.activate!()
fig2 = plotH(HxE2)
fig2
```

```{julia}
include("../src/setup.jl")
V = [ -1 1 1 -1; -1 -1 1 1]
Hermine = hermiteelement(V;conforming=true)
HermineUnkonform = hermiteelement(V;conforming=false)
Lagrande = lagrangeelement(V)
Serendip = serendipityelement(V)
# figHermine = plotH(Hermine)
# figHermine = plotH(HermineUnkonform)
# figLagrande = plotH(Lagrande)
figSerendip = plotH(Serendip)
save("Serendipity-Formfunktionen.png", figSerendip)
```














# Elementsteifigkeitsmatrix

```{julia}
@variables  h, ν,E ;
D = E*h^3 / 12*(1-ν^2)
∂1(u) =  ∂x(u)
∂2(u) =  ∂y(u)
∂3(u) =  ∂x(u) + ∂y(u)
Be(u) = [∂1(u), ∂2(u), ∂3(u)]
        
Be2(u) = [∂1(u) + ν * ∂2(u), ν * ∂1(u) + ∂2(u),(1- ν)/2 * ∂3(u)]
# aestd(u,v) = integrate(Be1std(u) ⋅ Be2std(v), QHat)
# Ke = (simplifyx.([aestd(n1, n2) for n1 ∈ H4, n2 ∈ H4]))
```



```{julia}


K = QHat

p1 = DomainSets.leftendpoint(K)
p2 = DomainSets.rightendpoint(K)
po = reduce(vcat,[p1, p2])


m1 = 4
L = Q{dimension(K),1}
P = basis(L, K)
N1 = vcat(
        [
        [ValueAtLF(p)]
        for p in po
        ]...
        )
M = [n(p) for p in ps, n in N1]
H4 = inv(M) * ps

```

```{julia}
p1 = DomainSets.leftendpoint(K)
p2 = DomainSets.rightendpoint(K)
po = reduce(vcat,[p1, p2])
V1 = [ -1 1 1 -1; -1 -1 1 1]
eachcol(V1)


# N = vec([gf(p) for gf in [ValueAtLF(p)] for p in po])
```