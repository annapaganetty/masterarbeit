```{julia}
include("../src/setup.jl")
```

## Plot der Plattenelemente
```{julia}
using MMJMesh.Gmsh
using Makie
GLMakie.activate!()
mesh02 = Meshes.Mesh("gmsh/plate-Bsp-03.1.msh")
# fixierte Knoten
fixedNodes = group(mesh02, :fixed0)
# freie Knoten
freeNodes = group(mesh02, :free0)
# Knoten an denen ein Punktlager ist 
column1 = coordinates(node(mesh02,4))
column2 = coordinates(node(mesh02,9))
column3 = coordinates(node(mesh02,11))
# Plot des Meshes
fig = mkfig2d(;title = "komplexe Platte | 2011 Elemente")
mplot!(mesh02,facecolor=:seashell2,faceplotzscale= 0.5,edgelinewidth=0.4,nodesvisible=true,edgesvisible=true,nodesize=5)
scatter!(coordinates(mesh02, group(mesh02, :fixed0)), color=:hotpink,markersize = 15)
scatter!(coordinates(mesh02, group(mesh02, :free0)), color=:lightblue,markersize = 15)
scatter!([column1 column2 column3], color=:green,markersize = 25)
# save("Beispiel-02-BT-complex-mesh.png",fig)
fig
```


```{julia}
nf = 3
bcs = [true, false,false]
mesh02.data[:kefunc] = DKQKe(p1)
mesh02.data[:refunc] = DKQRe(p1.q)
@time K,r = assembleKr(mesh02, nf)
applyDirichletBCs!(mesh02.groups[:fixed0], K, r, bcs) # gest체tze R채nder
applyDirichletBCs!([4,9,11], K, r, bcs) # Knoten mit St체tzen 
@time w = K \ r
maximum(w[1:3:end])
```

3.777843 seconds (63.40 M allocations: 3.964 GiB, 5.44% gc time)
0.727153 seconds (6 allocations: 223.546 MiB, 6.79% gc time)

```{julia}
maximum(w[1:3:end])
```

## Plot Verformung

```{julia}
GLMakie.activate!()
@time w02 = plotwBTP(mesh02, w;title="Verformung")
# save("Beispiel-02-BT-complex-w.png",w02)
```

18.468951 seconds (405.41 M allocations: 16.089 GiB, 11.42% gc time)

```{julia}
mesh02.data[:post] = postprocessor(p1, w,"BTP")  
```

```{julia}
GLMakie.activate!()
set_theme!(theme_minimal())
update_theme!(
    colormap=(:redblue,1.0),
    color=3,
    faceplotzscale=1,
    faceplotnpoints=15,
    edgesvisible=false,
    featureedgelinewidth=2.5,
) 
function plotr2D(m,nr,cr;title="")
    fig,ax = mkfig2d(title=title)
    p = mplot!(m, nr, 
    nodewarp = nothing,
    faceplotnpoints=1,
    faceplotmesh=0,
    facecolor=3,
    faceplotzscale=0,
    colorrange=cr,
    colormap=:RdBu)
    mplot!(m, edgesvisible = true, facesvisible = false)
    ax.title = maketitle(p, title)
    Colorbar(fig[1, 2],colorrange =cr)
    return fig
end
```

```{julia}
xs = LinRange(0, 20, 50)
ys = LinRange(0, 15, 50)
ys[2]
```

```{julia}
using CairoMakie
GLMakie.activate!()
fig = Figure()
sr,xs,ys = nodalresult(mesh02, :mx)
# ax,hm = contourf(fig[1,1][1, 1],  xs, ys, sr, colormap = :RdBu, levels = [-1e4, -5000, 0, 5000, 1e4])
# # Colorbar(fig[1,1][1, 2], hm, ticks = -1e4:5000:1e4)
# fig+
```

```{julia}
contourf(xs, ys, sr, levels=20, colormap=(:redblue,1.0))
```

```{julia}
xs
```


```{julia}
nrMX,_,_ = nodalresult(mesh02, :mx)
nrMY,_,_ = nodalresult(mesh02, :my)
nrMXY,_,_ = nodalresult(mesh02, :mxy)
```

```{julia}
plotr2D(mesh02,nrMX,(-130000, 130000),title = "Biegemoment mx")
```
```{julia}
plotr2D(mesh02,nrMY,(-130000, 130000),title = "Biegemoment my")
```

```{julia}
plotr2D(mesh02,nrMXY,(-130000, 130000),title = "Biegemoment mxy")
```

```{julia}
minMX = minimum(nrMX)/1e3
minMY = minimum(nrMY)/1e3
minMXY = minimum(nrMXY)/1e3
maxMX = maximum(nrMX)/1e3
maxMY = maximum(nrMY)/1e3
maxMXY = maximum(nrMXY)/1e3
```

Gegl채ttete Ergebnisse 

```{julia}
using CairoMakie
save("Beispiel-01-BTunr-mx.png",figBTmx)
save("Beispiel-01-BTunr-my.png",figBTmy)
save("Beispiel-01-BTunr-mxy.png",figBTmxy)
# save("Beispiel-01-BT-qx.png",figBTqx)
# save("Beispiel-01-BT-qy.png",figBTqy)

save("Beispiel-01-BTunr-mx-glatt.png",figBTmxGlatt)
save("Beispiel-01-BTunr-my-glatt.png",figBTmyGlatt)
save("Beispiel-01-BTunr-mxy-glatt.png",figBTmxyGlatt)
# save("Beispiel-01-BT-qx-glatt.png",figBTqxGlatt)
# save("Beispiel-01-BT-qy-glatt.png",figBTqyGlatt)
```
