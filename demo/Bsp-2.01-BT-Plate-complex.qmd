```{julia}
include("../src/setup.jl")
```

## Plot der Plattenelemente

```{julia}
using MMJMesh.Gmsh
using Makie
GLMakie.activate!()
mesh02 = Meshes.Mesh("gmsh/plate-Bsp-03.1.msh")
# fixierte Knoten
fixedNodes = group(mesh02, :fixed0)
# freie Knoten
freeNodes = group(mesh02, :free0)
# Knoten an denen ein Punktlager ist 
column1 = coordinates(node(mesh02,4))
column2 = coordinates(node(mesh02,9))
column3 = coordinates(node(mesh02,11))
# Plot des Meshes
fig = mkfig2d(;title = "komplexe Platte | 2011 Elemente")
mplot!(mesh02,facecolor=:seashell2,faceplotzscale= 0.5,edgelinewidth=0.4,nodesvisible=true,edgesvisible=true,nodesize=5)
scatter!(coordinates(mesh02, group(mesh02, :fixed0)), color=:hotpink,markersize = 15)
scatter!(coordinates(mesh02, group(mesh02, :free0)), color=:lightblue,markersize = 15)
scatter!([column1 column2 column3], color=:green,markersize = 25)
fig
```


```{julia}
nf = 3
bcs = [true, false,false]
mesh02.data[:kefunc] = DKQKe(p2)
mesh02.data[:refunc] = DKQRe(p2.q)
@time K,r = assembleKr(mesh02, nf)
applyDirichletBCs!(mesh02.groups[:fixed0], K, r, bcs) # gestütze Ränder
applyDirichletBCs!([4,9,11], K, r, bcs) # Knoten mit Stützen 
w = K \ r
```

Maximale Verformung

```{julia}
maximum(w[1:3:end])
```

## Plot Verformung

```{julia}
GLMakie.activate!()
w02 = plotwBTP(mesh02, w;title="Verformung")
```

Postprozessor

```{julia}
mesh02.data[:post] = postprocessor(p2, w,"BTP")  
```

Funktion zur Erstellung der 2D Plots

```{julia}
GLMakie.activate!()
set_theme!(theme_minimal())
update_theme!(
    colormap=cgrad(:lightrainbow, 11, categorical = true),
    color=3,
    faceplotzscale=1,
    faceplotnpoints=15,
    edgesvisible=false,
    featureedgelinewidth=2.5,
) 
function plotr2D(m,nr,cr,ticks;title="")
    fig,ax = mkfig2dComplex(title=title)
    p = mplot!(m, nr, 
    nodewarp = nothing,
    faceplotnpoints=1,
    faceplotmesh=0,
    facecolor=3,
    faceplotzscale=0,
    colorrange=cr,
    colormap=cgrad(:lightrainbow, 11, categorical = true))
    mplot!(m, edgesvisible = false, facesvisible = false)
    ax.title = maketitle(p, title)
    Colorbar(fig[1, 2],colorrange =cr,ticks = ticks,tickformat="{:.2f}")
    return fig
end
```

## Ergebnisse Knotenweise 

Momente

```{julia}
nrMX = nodalresult(mesh02, :mx)
nrMY = nodalresult(mesh02, :my)
nrMXY = nodalresult(mesh02, :mxy)
```

Querkräfte 

```{julia}
nrQX = nodalresult(mesh02, :qx)
nrQY = nodalresult(mesh02, :qy)
```

## Plot der Schnittgrößen

Momente 

```{julia}
figComplmx = plotr2D(mesh02,nrMX,(-121321, 53556),-121321:15897.9:53556,title = "Biegemoment mx")
figComplmy = plotr2D(mesh02,nrMY,(-69267, 45136),-121321:10400.27:53556,title = "Biegemoment my")
figComplmxy = plotr2D(mesh02,nrMXY,(-46724, 33504),-46724:7293.45:33504,title = "Biegemoment mxy")
```

Querkräfte 

```{julia}
figComplqx = plotr2D(mesh02,nrQX,(-551050, 336514),-551050:80687.63:336514,title = "Querkraft qx")
figComplqy = plotr2D(mesh02,nrQY,(-223676, 743745),-223676:87947.36:743745,title = "Querkraft qy")
```

## Berechnung der maximalen Schnittgrößen

```{julia}
minMX = minimum(nrMX)/1e3
minMY = minimum(nrMY)/1e3
minMXY = minimum(nrMXY)/1e3
maxMX = maximum(nrMX)/1e3
maxMY = maximum(nrMY)/1e3
maxMXY = maximum(nrMXY)/1e3
```

## Speichern der generierten Plots

```{julia}
using CairoMakie
save("Beispiel-02-BT-complex-mesh.png",fig)
save("Beispiel-02-BT-complex-w.png",w02)

save("Beispiel-02-BT-complex-mx.png",figComplmx)
save("Beispiel-02-BT-complex-my.png",figComplmy)
save("Beispiel-02-BT-complex-mxy.png",figComplmxy)
save("Beispiel-02-BT-complex-qx.png",figComplqx)
save("Beispiel-02-BT-complex-qy.png",figComplqy)

```
