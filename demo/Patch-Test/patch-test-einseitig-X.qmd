```{julia}
include("../../src/setup.jl")
```

# Patch Test - einseitig

## Plot der Plattenelemente
```{julia}
WGLMakie.activate!()
mPatchX = makePTMesh01(p3)
plotmesh(mPatchX;title="Patch Test")
```

## Verformung 

Berechnung der Elementsteifigkeitsmatrizen und Lastvektoren, sowie Festlegung der Randbedingungen. Anschließend Berechnung der Verformung

```{julia}
nf = 3
bcs = [true, false, false]
bcs1 = [false, false, false]

mPatchX.data[:kefunc] = plateKe(p3)
mPatchX.data[:refunc] = plateRe(p3.q)
K,r = assembleKr(mPatchX,nf)

# Randmomente um die y-Achse 
dofs2 = idxDOFs(mPatchX.groups[:boundarynodes],3)
r[dofs2[3]]  = -b/2
r[dofs2[6]]  = 0
r[dofs2[9]]  = b/2
r[dofs2[12]] = -b
r[dofs2[15]] = b 
r[dofs2[18]] = - b/2
r[dofs2[21]] = 0
r[dofs2[24]] =  b/2

applyDirichletBCs!(mPatchX.groups[:boundarynodes][1], K, r, bcs)
applyDirichletBCs!(mPatchX.groups[:boundarynodes][3:6], K, r, bcs)
applyDirichletBCs!(mPatchX.groups[:boundarynodes][8], K, r, bcs)

applyDirichletBCs!(mPatchX.groups[:boundarynodes][2], K, r, bcs1)
applyDirichletBCs!(mPatchX.groups[:boundarynodes][7], K, r, bcs1)

w = K \ r
thetaX = w[2:3:end] # an jeder stelle ungefähr 0
thetaY = w[3:3:end] 
```


```{julia}
plotwBTP(mPatchX, w; title="Verformung")
```

## Verdrehung ThetaX
```{julia}
plotThetaxBTP(mPatchX, w; title="Verdrehung θx")
```

## Verdrehung ThetaY
```{julia}
plotThetayBTP(mPatchX, w; title="Verdrehung θy")
```

## Schnittgrößen Plotten 

```{julia}
mPatchX.data[:post] = postprocessorBTP(p3, w)
set_theme!(theme_minimal())
update_theme!(
    colormap=:redblue,
    color=3,
    faceplotzscale=1,
    faceplotnpoints=15,
    edgesvisible=true,
    featureedgelinewidth=2.5
)
```

### Mx
```{julia}
plotrBTP(mPatchX, :mx, "Biegemoment mx", (-1, 1),nodal = false, a3d=true)
```

### My
```{julia}
plotrBTP(mPatchX, :my, "Biegemoment my", (-1, 1),nodal = false, a3d=true)
```

### Mxy
```{julia}
plotrBTP(mPatchX, :mxy, "Biegemoment mxy", (-10,1),nodal = false, a3d=true)
```

```{julia}
plotrBTP(mPatchX, :qx, "Querkraft qx", (-1,1),nodal = false, a3d=true)
```

```{julia}
plotrBTP(mPatchX, :qy, "Querkraft qy", (-1,1),nodal = true, a3d=true)
```
