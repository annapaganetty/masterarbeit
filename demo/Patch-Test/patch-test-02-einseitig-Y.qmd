```{julia}
include("../../src/setup.jl")
```

# Patch Test

```{julia}
a = 20 
b = 10 
```

Parameter Platte 
```{julia}
p3 = @var Params()
p3.lx = 2*a # = 40
p3.ly = 2*b # = 20 
p3.q = 0
p3.ν = 0
p3.h = 1
p3.E = 1000;
```

## Plot der Plattenelemente
```{julia}
WGLMakie.activate!()
mPatch02Y = makePTMesh02(p3)
plotmesh(mPatch02Y;title="Patch Test")
```

## Verformung 

Berechnung der Elementsteifigkeitsmatrizen und Lastvektoren, sowie Festlegung der Randbedingungen. Anschließend Berechnung der Verformung

```{julia}
nf = 3

#TODO Verdrehungen begrenzen irgendwie??
bcs = [true, false, true]
bcs1 = [false, false, true]

mPatch02Y.data[:kefunc] = plateKe(p3)
mPatch02Y.data[:refunc] = plateRe(p3.q)
K,r = assembleKr(mPatch02Y,nf)

# Randmomente um die x-Achse
dofs2 = idxDOFs(mPatch02Y.groups[:boundarynodes],3)
r[dofs2[2]]  = a/2 
r[dofs2[5]]  = a  
r[dofs2[8]]  = a/2 
r[dofs2[11]] = 0   
r[dofs2[14]] = 0
r[dofs2[17]] = -a/2 
r[dofs2[20]] = -a 
r[dofs2[23]] = -a/2
applyDirichletBCs!(mPatch02Y.groups[:boundarynodes][1:3], K, r, bcs)
applyDirichletBCs!(mPatch02Y.groups[:boundarynodes][6:8], K, r, bcs)
applyDirichletBCs!(mPatch02Y.groups[:boundarynodes][4:5], K, r, bcs1)
# r[dofs2[10]] = 2

w = K \ r
thetaX = w[2:3:end]
thetaY = w[3:3:end] # müsste an jeder stelle ungefähr 0 sein
r
```

6   7   8
4       5
1   2   3

```{julia}
plotwBTP(mPatch02Y, w; title="Verformung")
```

## Verdrehung ThetaX
```{julia}
plotThetaxBTP(mPatch02Y, w; title="Verdrehung θx")
```

## Verdrehung ThetaY
```{julia}
plotThetayBTP(mPatch02Y, w; title="Verdrehung θy")
```

## Schnittgrößen Plotten 

```{julia}
mPatch02Y.data[:post] = postprocessorBTP(p3, w)
set_theme!(theme_minimal())
update_theme!(
    colormap=:redblue,
    color=3,
    faceplotzscale=1,
    faceplotnpoints=15,
    edgesvisible=true,
    featureedgelinewidth=2.5
)
```

### Mx
```{julia}
plotrBTP(mPatch02Y, :mx, "Biegemoment mx", (-1, 1),nodal = false, a3d=true)
```

### My
```{julia}
plotrBTP(mPatch02Y, :my, "Biegemoment my", (-1,1),nodal = false, a3d=true)
```

### Mxy
```{julia}
plotrBTP(mPatch02Y, :mxy, "Biegemoment mxy", (-0.1 , 0.1),nodal=true, a3d=true)
```
