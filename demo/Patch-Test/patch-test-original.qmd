```{julia}
include("../../src/setup.jl")
```

# Patch Test

```{julia}
a = 20 
b = 10 
```

Parameter Platte 
```{julia}
p3 = @var Params()
p3.lx = 2*a
p3.ly = 2*b
p3.q = 0
p3.ν = 0
p3.h = 1
p3.E = 1000;
```

## Plot der Plattenelemente
```{julia}
WGLMakie.activate!()
mPatchOG = makequadrilateralMesh(p3)
plotmesh(mPatchOG;title="Patch Test")
```

## Verformung 

Berechnung der Elementsteifigkeitsmatrizen und Lastvektoren, sowie Festlegung der Randbedingungen. Anschließend Berechnung der Verformung

```{julia}
nf = 3
bcs1 = [true, false,false]
bcs2 = [false, false, false]
mPatchOG.data[:kefunc] = plateKe(p3)
mPatchOG.data[:refunc] = plateRe(p3.q)
K,r = assembleKr(mPatchOG,nf)

applyDirichletBCs!(mPatchOG.groups[:boundarynodes][1:4], K, r, bcs1)

dofs2 = idxDOFs(mPatchOG.groups[:boundarynodes],3)

# r[dofs2[10]] = 2

# Randmomente um die y-Achse
r[dofs2[2]]  = a 
r[dofs2[5]]  = a
r[dofs2[8]]  = -a
r[dofs2[11]] = -a
# Randmomente um die x-Achse 
r[dofs2[3]]  = -b
r[dofs2[6]]  = b
r[dofs2[9]]  = -b
r[dofs2[12]] = b

w = K \ r

thetaX = w[2:3:end]
# thetaY = w[3:3:end]
w[1:3:end]
```

```{julia}
plotwBTP(mPatchOG, w; title="Verformung")
```

## Verdrehung ThetaX
```{julia}
plotThetaxBTP(mPatchOG, w; title="Verdrehung θx")
```

## Verdrehung ThetaY
```{julia}
plotThetayBTP(mPatchOG, w; title="Verdrehung θy")
```

## Schnittgrößen Plotten 

```{julia}
mPatchOG.data[:post] = postprocessorBTP(p3, w)
set_theme!(theme_minimal())
update_theme!(
    colormap=:redblue,
    color=3,
    faceplotzscale=1,
    faceplotnpoints=15,
    edgesvisible=true,
    featureedgelinewidth=2.5
)
```

### Mx
```{julia}
plotrBTP(mPatchOG, :mx, "Biegemoment mx", (-0.02, 0.02),nodal = true, a3d=true)
```

### My
```{julia}
plotrBTP(mPatchOG, :my, "Biegemoment my", (-0.03, 0.02),nodal = true, a3d=true)
```

### Mxy
```{julia}
plotrBTP(mPatchOG, :mxy, "Biegemoment mxy", (-14 , 9),nodal = false, a3d=true)
```
