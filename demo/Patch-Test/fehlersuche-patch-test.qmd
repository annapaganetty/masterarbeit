```{julia}
include("../src/setup.jl")
```

# Patch Test

```{julia}
a = 20 
b = 10 
```

Parameter Platte 
```{julia}
p3 = @var Params()
p3.lx = 2*a
p3.ly = 2*b
p3.q = 0
p3.ν = 0.3
p3.h = 1
p3.E = 1000;
```

## Plot der Plattenelemente
```{julia}
WGLMakie.activate!()
mPatchOGF = makequadrilateralMesh(p3)
e1 =element(mPatchOGF,1)
jF = jacobian(parametrization(geometry(e1)))
Hx = MappingFromComponents(btpHx(e)...) # 12 Element Vektor mit Hx Funktionen 
Hy = MappingFromComponents(btpHy(e)...) # 12 Element Vektor mit Hy Funktionen 
∇ξN = MMJMesh.Mathematics.TransposeMapping(jacobian(Hx))
∇ηN = MMJMesh.Mathematics.TransposeMapping(jacobian(Hy))
# geometry(e1) # Koordinaten des Elements
# parametrization(geometry(e1)) # Parametrisierung
J = jF(1,1)
∇ₓN = (inv(J') * ∇ξN(1,1))
∇ₓN[1,:]'

```

 0.0  0.0  0.0  0.0  0.0  -0.0367647  -0.00551471  0.0  -0.0367647   0.00551471  0.0  -0.0367647
 0.0  0.0  0.0  0.0  0.0  -0.0514706   0.0297794   0.0   0.448529   -0.0297794   0.0   0.198529


```{julia}

x1 = 0
x2 = 7.2
x3 = 28.8
x4 = 40
y1 = 0
y2 = 4
y3 = 8
y4 = 0

J11 = 0.25 * ((x2 - x1) + (x3-x4) + ((x1-x2)+(x3-x4)))
J12 = 0.25 * ((y2 - y1) + (y3-y4) + ((y1-y2)+(y3-y4)))
J21 = 0.25 * ((x3 - x2) + (x4-x1) + ((x1-x2)+(x3-x4)))
J22 = 0.25 * ((y3 - y2) + (y4-y1) + ((y1-y2)+(y3-y4)))
J = [J11 J12; J21 J22]
```


```{julia}
# jacobianMatrix(e1)
# -> ERgebnis der Funktion
jac11 = -4.6-1.0   
jac12 = 1+3.0
jac21 = -4.6+15.4  
jac22 = 1+1.0
jac = [jac11 jac12; jac21 jac22]
```

FEHLER 

jF(1,1) =   -5.6    10.8
             4.0     2.0

J(1,1) =    -5.6     4.0
            10.8     2.0

jac(1,1) =  -5.6     4.0
            10.8     2.0
