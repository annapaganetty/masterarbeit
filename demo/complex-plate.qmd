```{julia}
include("../src/setup.jl")
```

# Beispiel komplexe Platte

## Plot der Plattenelemente
```{julia}
using MMJMesh.Gmsh
m1 = Mesh("gmesh/complex-plate-02.msh")
plotmesh(m1; title="quadratische Platte")
```

## Verformung 

Berechnung der Elementsteifigkeitsmatrizen und Lastvektoren, sowie Festlegung der Randbedingungen. Anschließend Berechnung der Verformung

```{julia}
w = plate(m1, p1, "BTP")
```

Ausgabe maximale Verformung und prozentuale Abweichung von der Berechnung nach den Czerny-Tafeln

```{julia}
w_fe = maximum(w[1:3:end])
w_czerny = 5e3 * 8^4 / (31000e6 * 0.2^3) * 0.0152
w_abw = 100 * abs(w_fe - w_czerny) / w_czerny
```

```{julia}
update_theme!(
    colormap=:redblue,
    color=3,
    faceplotzscale=1,
    faceplotnpoints=15,
    faceplotmesh=0,
    edgesvisible=true,
    featureedgelinewidth=2.5)
plotwBTP(m1, w; title="Verformung")
```

## Verdrehung ThetaX
```{julia}
plotThetaxBTP(m1, w; title="Verdrehung θx")
```

## Verdrehung ThetaY
```{julia}
plotThetayBTP(m1, w; title="Verdrehung θy")
```

## Schnittgrößen Plotten 

```{julia}
post = m1.data[:post]
```

### Mx

```{julia}
plotrBTP(m1, :mx, "Biegemoment mx", (-0.001, 0.001), nodal=false, a3d=false)
```

### My
```{julia}
plotrBTP(m1, :my, "Biegemoment my", (-0.001, 0.001), nodal=false, a3d=true)
```

### Mxy
```{julia}
plotrBTP(m1, :mxy, "Biegemoment mxy", (-0.001, 0.001), nodal=true, a3d=true)
```

```{julia}
plotrBTP(m1, :qx, "qx", (-0.001, 0.001), nodal=false, a3d=true)
```
