```{julia}
include("../src/setup.jl")
```

## Plot der Plattenelemente

```{julia}
xElem = 20
mQuadBT = makequadratcicMesh(p1, xElem)
figBT = plotmesh(mQuadBT;title="quadratische Platte | 8m x 8m | 400 Elemente")
```

Berechnung des Verschiebungsvektors

```{julia}
# Berechnung des Verschiebungsvektors
w = plate(mQuadBT, p1, "BTP")
# maximale Verschiebung in vertikaler Richtung
w_fe = maximum(w[1:3:end])
```

Vergleich mit Czerny Tafeln

```{julia}
# Vergleichswert aus den Czerny Tafeln
w_czerny = 5e3 * 8^4 / (31000e6 * 0.2^3) * 0.0152
# prozentuale Abweichung
100 * abs(w_fe - w_czerny) / w_czerny
```

_Abweichung = 0.566 %_

## Plot Verformung

```{julia}
GLMakie.activate!()
wBT = plotwBTP(mQuadBT, w;title="Verformung")
```

## Plot ungeglättete Schnittgrößen

Darstellungsfarben festlegen 

```{julia}
set_theme!(theme_minimal())
update_theme!(
    colormap=(:redblue,1.0),
    color=3,
    faceplotzscale=1,
    faceplotnpoints=15,
    edgesvisible=false,
    featureedgelinewidth=2.5,
)   
```

Momente

```{julia}
GLMakie.activate!()
figBTmx = plotrBTP(mQuadBT, :mx, "Biegemoment mx", (-17000, 17000),nodal = false, a3d=true)
figBTmy= plotrBTP(mQuadBT, :my, "Biegemoment my", (-17000, 17000),nodal = false, a3d=true)
figBTmxy= plotrBTP(mQuadBT, :mxy, "Biegemoment mxy", (-4000, 4000),nodal = false, a3d=true)
```

Querkräfte

```{julia}
figBTqx= plotrBTP(mQuadBT, :qx, "Querkraft qx", (-17000, 17000),nodal = false, a3d=true)
figBTqy= plotrBTP(mQuadBT, :qy, "Querkraft qy", (-17000, 17000),nodal = false, a3d=true)
```


## Plot geglättete Schnittgrößen

Momente

```{julia}
figBTmxGlatt= plotrBTP(mQuadBT, :mx, "Biegemoment mx", (-17000, 17000),nodal = true, a3d=true)
figBTmyGlatt= plotrBTP(mQuadBT, :my, "Biegemoment my", (-17000, 17000),nodal = true, a3d=true)
figBTmxyGlatt= plotrBTP(mQuadBT, :mxy, "Biegemoment mxy", (-4000, 4000),nodal = true, a3d=true)
```

Querkräfte

```{julia}
figBTqxGlatt= plotrBTP(mQuadBT, :qx, "Querkraft qx", (-17000, 17000),nodal = true, a3d=true)
figBTqyGlatt=plotrBTP(mQuadBT, :qy, "Querkraft qy", (-17000, 17000),nodal = true, a3d=true)
```


## Speichern der generierten Plots

```{julia}
using CairoMakie
save("Beispiel-01-BT-mesh.png",figBT)
save("Beispiel-01-BT-w.png",wBT)

save("Beispiel-01-BT-mx.png",figBTmx)
save("Beispiel-01-BT-my.png",figBTmy)
save("Beispiel-01-BT-mxy.png",figBTmxy)
save("Beispiel-01-BT-qx.png",figBTqx)
save("Beispiel-01-BT-qy.png",figBTqy)

save("Beispiel-01-BT-mx-glatt.png",figBTmxGlatt)
save("Beispiel-01-BT-my-glatt.png",figBTmyGlatt)
save("Beispiel-01-BT-mxy-glatt.png",figBTmxyGlatt)
save("Beispiel-01-BT-qx-glatt.png",figBTqxGlatt)
save("Beispiel-01-BT-qy-glatt.png",figBTqyGlatt)
```

# Konvergenz Plot

```{julia}
nn = [];
ww = [];
for i = 2:2:30
    xElement = i
    mNew = makequadratcicMesh(p1, xElement)
    wkonv = plate(mNew, p1, "BTP")
    push!(nn, 4 * nnodes(mNew))
    push!(ww, maximum(abs.(wkonv[1:4:end])))
end
ww
```


```{julia}
using CairoMakie
fig = Figure()
Axis(fig[1, 1],title= "Konvergenz", xlabel="Anzahl Freiheitsgrade", ylabel="Maximale Verschiebung in mm")
scatterlines!(nn, 1000*ww)
fig
```

```{julia}
save("Konvergenzplot_BT.png",fig)
```