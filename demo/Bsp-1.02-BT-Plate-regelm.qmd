```{julia}
include("../src/setup.jl")
```

## Plot der Plattenelemente
```{julia}
xElem = 20
mQuadBT = makequadratcicMesh(p1, xElem)
figBT = plotmesh(mQuadBT;title="quadratische Platte | 8m x 8m | 400 Elemente")
```

```{julia}
# Berechnung des Verschiebungsvektors
w = plate(mQuadBT, p1, "BTP")
# maximale Verschiebung in vertikaler Richtung
w_fe = maximum(w[1:3:end])
# Vergleichswert der Czerny Tafeln
w_czerny = 5e3 * 8^4 / (31000e6 * 0.2^3) * 0.0152
# prozentuale Abweichung
100 * abs(w_fe - w_czerny) / w_czerny
```

## Plot Verformung

```{julia}
plotwBTP(mQuadBT, w;title="Verformung")
```


```{julia}
set_theme!(theme_minimal())
update_theme!(
    colormap=(:redblue,1.0),
    color=3,
    faceplotzscale=1,
    faceplotnpoints=15,
    edgesvisible=false,
    featureedgelinewidth=2.5,
)   
```

```{julia}
figBTmx = plotrBTP(mQuadBT, :mx, "Biegemoment mx", (-17000, 17000),nodal = false, a3d=true)
```

```{julia}
figBTmy= plotrBTP(mQuadBT, :my, "Biegemoment my", (-17000, 17000),nodal = false, a3d=true)
```

```{julia}
figBTmxy= plotrBTP(mQuadBT, :mxy, "Biegemoment mxy", (-4000, 4000),nodal = false, a3d=true)
```

```{julia}
figBTqx= plotrBTP(mQuadBT, :qx, "Querkraft qx", (-25.5, 25.5),nodal = false, a3d=true)
```

```{julia}
figBTqy= plotrBTP(mQuadBT, :qy, "Querkraft qy", (-25.5, 25.5),nodal = false, a3d=true)
```

Geglättete Ergebnisse 
```{julia}
figBTmxGlatt= plotrBTP(mQuadBT, :mx, "Biegemoment mx", (-17000, 17000),nodal = true, a3d=true)
```


```{julia}
figBTmyGlatt= plotrBTP(mQuadBT, :my, "Biegemoment my", (-17000, 17000),nodal = true, a3d=true)
```

```{julia}
figBTmxyGlatt= plotrBTP(mQuadBT, :mxy, "Biegemoment mxy", (-4000, 4000),nodal = true, a3d=true)
```

```{julia}
figBTqxGlatt= plotrBTP(mQuadBT, :qx, "Querkraft qx", (-25.5, 25.5),nodal = true, a3d=true)
```

```{julia}
figBTqyGlatt=plotrBTP(mQuadBT, :qy, "Querkraft qy", (-25.5, 25.5),nodal = true, a3d=true)
```


```{julia}
using CairoMakie
save("Beispiel-01-BT-mx.png",figBTmx)
save("Beispiel-01-BT-my.png",figBTmy)
save("Beispiel-01-BT-mxy.png",figBTmxy)
# save("Beispiel-01-BT-qx.png",figBTqx)
# save("Beispiel-01-BT-qy.png",figBTqy)

save("Beispiel-01-BT-mx-glatt.png",figBTmxGlatt)
save("Beispiel-01-BT-my-glatt.png",figBTmyGlatt)
save("Beispiel-01-BT-mxy-glatt.png",figBTmxyGlatt)
# save("Beispiel-01-BT-qx-glatt.png",figBTqxGlatt)
# save("Beispiel-01-BT-qy-glatt.png",figBTqyGlatt)
```

# Konvergenz Plot

```{julia}
nn = [];
ww = [];
for i = 2:2:30
    xElement = i
    mNew = makequadratcicMesh(p1, xElement)
    wkonv = plate(mNew, p1, "BTP")
    push!(nn, 4 * nnodes(mNew))
    push!(ww, maximum(abs.(wkonv[1:4:end])))
end
ww
```


```{julia}
using CairoMakie
fig = Figure()
Axis(fig[1, 1],title= "Konvergenz", xlabel="Anzahl Freiheitsgrade", ylabel="Maximale Verschiebung in mm")
scatterlines!(nn, 1000*ww)
fig
```

```{julia}
save("Konvergenzplot_BT.png",fig)
```


```{julia}
e = element(mQuadBT,1)
Hx = (btpHx(e)) # 12 Element Vektor mit Hx Funktionen 
Hy = (btpHy(e)) # 12 Element Vektor mit Hy Funktionen 

# Ableitungen Hx und Hy
Hxx = ∂x.(Hx)
Hxy = ∂y.(Hx)
Hyx = ∂x.(Hy)
Hyy = ∂y.(Hy) 
# Einträge inverse Jacobi Matrix
j11,j12,j21,j22,d = jacobianMatrix(e)

idxs = idxDOFs(nodeindices(e), 3)
w[idxs]
mx = 1e-3 * sum(((j11 * Hxx + j12 * Hxy) + 1 * (j21 * Hyx + j22 * Hyy)) .* w[idxs])
my = 1e-3 * (1 * (j11 * Hxx + j12 * Hxy) + (j21 * Hyx + j22 * Hyy)) .* w[idxs]
mxy = 1e-3 * (1 - 1)/2 * ((j11 * Hyx + j12 * Hyy) + (j21 * Hxx + j22 * Hxy)) .* w[idxs]

mx
```